Description: >
    Roy Telles - DevOps/Data Engineer
    This template is created as part of the DevOps Nanodegree from Udacity.
    It deploys a VPC, with a pair of public and private subnets spread across
    two Availabilty Zones. It also deploys an Internet Gateway, with a default
    route on the public subnets. Finally, it deploys a pair of NAT Gateways
    (one in each AZ), and default routes for them in the private subnets.

# Parameters are something we use to pass values to our CloudFormation script
Parameters:
    EnvironmentName:
        Description: >
            An Environment name that'll be prefixed to resource names
        Type: String
    # Now start with the VPC (the foundation to our network)
    VpcCIDR:
        Description:
            Please enter the IP range (CIDR notation) for this VPC
        Type: String
        Default: 10.0.0.0/16

    # Subnet Parameters
    PublicSubnet1CIDR:
        Description: >
            Please enter the IP range (CIDR notation) for the public subnet in
            the first Availability Zone
        Type: String
        Default: 10.0.0.0/24

    PublicSubnet2CIDR:
        Description: >
            Please enter the IP range (CIDR notation) for the public subnet in
            the second Availability Zone
        Type: String
        Default: 10.0.1.0/24

    PrivateSubnet1CIDR:
        Description: >
            Please enter the IP range (CIDR notation) for the private subnet in
            the first Availability Zone
        Type: String
        Default: 10.0.2.0/24

    PrivateSubnet2CIDR:
        Description: >
            Please enter the IP range (CIDR notation) for the private subnet in
            the second Availability Zone
        Type: String
        Default: 10.0.3.0/24

# REMEMBER: CloudFormation will create these resources in order
Resources:
    # The VPC
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR  # The Parameter!
            EnableDnsHostnames: true
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName  # Another Parameter :)

    # The Internet Gateway
    # REMEMBER: this resource enables inbound/outbound traffic from outside
    #   your private Cloud
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    # This attaches the VPC and InternetGateway (needed, otherwise they won't
    # be associated with each other)
    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    # The Subnets
    PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            # This has to be set to reference the VPC resource because
            # CloudFormation needs to know where we're trying to deploy this
            VpcId: !Ref VPC
            # Select picks a value from a list of values that we provide.
            #
            # In this case, the list of values is also a function called
            # GetAZs which gives us a list of availability zones that are
            # available in this particular geographical area.
            #
            # We don't really care which values are returned to us or in which
            # order. We just have to be sure private subnet 1 is in a different
            # availability zone than private subnet 2.
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            # CidrBlock has to be a subnet or subnetwork of the overall VPC.
            #
            # If we have a VPC at 10.0.0.0/16, it will be a subset for the
            # specific subnets. Private subnets have to be a smaller
            # subnetwork.
            CidrBlock: !Ref PublicSubnet1CIDR
            # When we deploy the server, will it automatically have a public
            # IP or not?
            # NOTE: Because we're going to be using a routing table, whether
            #   this value is true or false doesn't matter
            MapPublicIpOnLaunch: true
            Tags:
                # Notice the Tag value uses the same EnvironmentName reference
                # across all Subnets. The difference mainly comes from the
                # availability zones.
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

    PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

    PrivateSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

    PrivateSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

    # The NAT Gateways - to help route our private traffic out to the public
    #
    # EIP stands for Elastic IP - we want this to assign our own IPs, so that
    # once it's set, it'll never change. This is to maintain the same IP
    # address when we do maintenance or restarts. If we need an IP that'll
    # never change, we need to allocate an Elastic IP.
    #
    # REMEMBER: Elastic means - to maintain shape after distortion
    NatGateway1EIP:
        Type: AWS::EC2::EIP
        # This setting means that this resource needs to wait for the creation
        # of another resource (in this case, the InternetGatewayAttachment).
        #
        # This is a good hint for CloudFormation on what to build first and in
        # which order to build things.
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGateway2EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGateway1:
        Type: AWS::EC2::NatGateway
        Properties:
            # Pulls the IP address that we just allocated in the resource
            # creations above
            AllocationId: !GetAtt NatGateway1EIP.AllocationId
            # A reference to where we want to deploy this gateway (we know
            # they're already created)
            SubnetId: !Ref PublicSubnet1

    NatGateway2:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway2EIP.AllocationId
            SubnetId: !Ref PublicSubnet2

    # The Route tables - the last crucial step for the network foundation
    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            # Attach it to our VPC
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Routes

    DefaultPublicRoute:
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties:
            RouteTableId: !Ref PublicRouteTable
            # Route all addresses
            DestinationCidrBlock: 0.0.0.0/0
            # Particularly, route to InternetGateway
            GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2

    # NOTE: We create multiple route tables for future expansions. When we have
    #   more subnets and more complex rules, we don't want to just have a
    #   single place to put a rule that could affect or break something else.
    PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Routes (AZ1)

    DefaultPrivateRoute1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            # When routing traffic to all addresses
            DestinationCidrBlock: 0.0.0.0/0
            # Send it to the NAT gateway
            # This keeps traffic for private subnets within the VPC
            NatGatewayId: !Ref NatGateway1

    # Associate the tables to the Subnets
    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1

    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Routes (AZ2)

    DefaultPrivateRoute2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway2

    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2

# NOTE: The same logic applies to all exported rosources.
Outputs:
    # Chances are, if we have another script that will create resources, those
    # resources are going to require a VPC, so we export it
    VPC:
        Description: A reference to the created VPC
        # This references the VPC that gets created in this file
        Value: !Ref VPC
        Export:
            # Takes the variabel EnvironmentName (i.e. UdacityProject) and
            # attaches "-VPCID" to it. It will also contain the actual ID of
            # the VPC that gets created.
            Name: !Sub ${EnvironmentName}-VPCID

    VPCPublicRouteTable:
        Description: Public Routing
        Value: !Ref PublicRouteTable
        Export:
            Name: !Sub ${EnvironmentName}-PUB-RT

    VPCPrivateRouteTable1:
        Description: Private Routing AZ1
        Value: !Ref PrivateRouteTable1
        Export:
            Name: !Sub ${EnvironmentName}-PRIV1-RT

    VPCPrivateRouteTable2:
        Description: Private Routing AZ2
        Value: !Ref PrivateRouteTable2
        Export:
            Name: !Sub ${EnvironmentName}-PRIV2-RT

    PublicSubnets:
        Description: A list of the public subnets
        # Join works just like you know it does. Some resources, such as
        # autoscaling and load balancers require a list of resources, not just
        # one. So this is a list of PublicSubnet IDs.
        Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ] ]
        Export:
            # We assign the list to a variable
            Name: !Sub ${EnvironmentName}-PUB-NETS

    PrivateSubnets:
        Description: A list of the private subnets
        Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ] ]
        Export:
            Name: !Sub ${EnvironmentName}-PRIV-NETS

    PublicSubnet1:
        Description: A reference to the public subnet in AZ1
        Value: !Ref PublicSubnet1
        Export:
            Name: !Sub ${EnvironmentName}-PUB1-SN

    PublicSubnet2:
        Description: A reference to the public subnet in AZ2
        Value: !Ref PublicSubnet2
        Export:
            Name: !Sub ${EnvironmentName}-PUB2-SN

    PrivateSubnet1:
        Description: A reference to the private subnet in AZ1
        Value: !Ref PrivateSubnet1
        Export:
            Name: !Sub ${EnvironmentName}-PRIV1-SN

    PrivateSubnet2:
        Description: A reference to the private subnet in AZ2
        Value: !Ref PrivateSubnet2
        Export:
            Name: !Sub ${EnvironmentName}-PRIV2-SN
