Description: >
    Roy Telles / Udacity 2021
    This file sets up the hardawre/software infrastructure in our Stack. Namely,
    the Security groups, AutoScaling group, EC2 instance configuration, and
    Load balancers.

# NOTE: We only have one parameter, which will be the environment name. We use
#   this value to reference the output values of the networking script.
Parameters:
    EnvironmentName:
        Description: Environment name to be prefixed to resource names
        Type: String
Resources:
    # BEGIN: Security Group definitions
    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to load balancer
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
            # Add our custom TCP rule for Outbound
            - IpProtocol: tcp
              FromPort: 8080
              ToPort: 8080
              CidrIp: 0.0.0.0/0
    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to our hosts and SSH from local only
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
            # Port 8080 is the standard access port
            - IpProtocol: tcp
              FromPort: 8080
              ToPort: 8080
              CidrIp: 0.0.0.0/0
            # Port 22 indicates the SSH port
            # Ideally, you wouldn't have this port open (or any other port
            # other than the service port). Once all the necessary fixes
            # are made, you want to close this port for good to avoid data
            # breaches
            - IpProtocol: tcp
              FromPort: 22
              ToPort: 22
              CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            # Establish the outbound openness. If our machine is trying to
            # connect or download some software patches, we want to be able
            # to access the Internet unrestricted.
            - IpProtocol: tcp
              FromPort: 0
              # Fun fact: There are a total of 65,535 TCP ports. This
              #     corresponds to the largest 16-bit unsigned integer.
              ToPort: 65535
              CidrIp: 0.0.0.0/0
    # END: Security Group definitions
    # BEGIN: JumpBox definition (and required aspects)
    JumpBoxSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Enables SSH from local only
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 22
              ToPort: 22
              CidrIp: 67.180.154.49/32
            SecurityGroupEgress:
            # Establish the outbound openness. If our machine is trying to
            # connect or download some software patches, we want to be able
            # to access the Internet unrestricted.
            - IpProtocol: tcp
              FromPort: 0
              # Fun fact: There are a total of 65,535 TCP ports. This
              #     corresponds to the largest 16-bit unsigned integer.
              ToPort: 65535
              CidrIp: 0.0.0.0/0
    JumpBox:
        Type: AWS::EC2::Instance
        Properties:
            SecurityGroupIds:
                - Ref: JumpBoxSecGroup
            SubnetId:
                Fn::ImportValue:
                    !Sub ${EnvironmentName}-PUB1-SN
            ImageId: ami-0cf6f5c8a62fa5da6
            KeyName: udacity-testinstance-keypair
            InstanceType: t2.micro
            Tags:
                - Key: Name
                  Value: Jump Box
    # END: JumpBox
    # BEGIN: LaunchConfiguration
    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    sudo apt-get update -y
                    sudo apt-get install apache2 -y
                    sudo apt-get install httpd -y
                    sudo service httpd start
                    sudo systemctl start apache2.service
                    cd /var/www/html
                    echo "It works! Udagram, Udacity" > index.html
            # The ID of the image we're trying to run (i.e. Linux, Windows,
            # Ubuntu, etc.)
            # In this case, it's a Linux machine
            # NOTE: Had to update ami due to constant failed health checks
            ImageId: ami-0ac73f33a1888c64a
            # We can optionally apply an SSH key. Key Names must exist.
            # REMEMBER: Remove this when submitting as project
            KeyName: udacity-testinstance-keypair
            SecurityGroups:
            # Reference our security group defined above
            - Ref: WebServerSecGroup
            InstanceType: t3.medium
            BlockDeviceMappings:
            # DeviceNames are mount points where you can create folders
            - DeviceName: "/dev/sdk"
              Ebs:
                  # How much harddrive space
                  VolumeSize: '10'
    # END: LaunchConfiguration
    # BEGIN: AutoScaling Group
    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
            - Fn::ImportValue:
                !Sub "${EnvironmentName}-PRIV-NETS"
            LaunchConfigurationName:
                Ref: WebAppLaunchConfig
            MinSize: '3'
            MaxSize: '5'
            # Before creating the Load Balancer, don't need this yet. Once a
            # Load Balancer is present, you can add this back in.
            TargetGroupARNs:
            - Ref: WebAppTargetGroup
    # END: AutoScaling Group
    # BEGIN: Load Balancer (& necessary components)
    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            # We ask for 2 subnets. This is because the load balancer itself
            # is not a single point of failure. The load balancer will have a
            # single entry point into your web application. But it itself is
            # not a single point as it will internally have more than one copy.
            # So if the Load Balancer dies, you will still provide service.
            Subnets:
            - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
            - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
            SecurityGroups:
            - Ref: LBSecGroup
    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
            - Type: forward
              TargetGroupArn:
                  Ref: WebAppTargetGroup
            LoadBalancerArn:
                Ref: WebAppLB
            # NOTE: For secure port HTTP, that would be 443. But for that, you
            #   would need an SSL certificate.
            Port: '80'
            Protocol: HTTP
    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
            - Type: forward
              TargetGroupArn: !Ref 'WebAppTargetGroup'
            Conditions:
            - Field: path-pattern
              Values: [/]
            ListenerArn: !Ref 'Listener'
            Priority: 1
    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            # What HealthCheck will do is go to port 80 of the instances of the
            # autoscaling group and check for an HTTP response. It will check
            # the main path of the web server (in this case '/'). If a response
            # other than 200 gets returned, the Load Balancer will declare the
            # service unhealthy and then autoscaling will take it from there.
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            # Timeout set to 8 seconds. If the response takes longer than 8
            # seconds, this will be deemed unhealthy.
            HealthCheckTimeoutSeconds: 8
            # If we get 2 valid responses from a server, each one separated by
            # 10 seconds (see IntervalSeconds above) they they will be declared
            # healthy and start receiving traffic.
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            # ThresholdCount is basically the number of retries
            UnhealthyThresholdCount: 5
            # The VPC ID of where this resource is to be created.
            VpcId:
                Fn::ImportValue:
                    Fn::Sub: "${EnvironmentName}-VPCID"
    # END: Load Balancer (& necessary components)
Outputs:
    WebAppLB:
        Description: A reference to the created Load Balancer's DNS Name
        Value: !Sub http://${WebAppLB.DNSName}
        Export:
            # Takes the variabel EnvironmentName (i.e. UdacityProject) and
            # attaches "-VPCID" to it. It will also contain the actual ID of
            # the VPC that gets created.
            Name: !Sub ${EnvironmentName}-DNSNAME
